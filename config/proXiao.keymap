/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&mt { quick_tap_ms = <220>; };

/ {
    macros {
        // Windows sleep key

        win_sleep: win_sleep {
            wait-ms = <50>;
            tap-ms = <5>;
            compatible = "zmk,behavior-macro";
            label = "WIN_SLEEP_KEY";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_GUI &kp TAB &kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW &kp DOWN_ARROW &kp ENTER &kp ENTER>,
                <&macro_tap>;
        };
    };
};

/ {
    behaviors {
        LHT: LHT {
            compatible = "zmk,behavior-hold-tap";
            label = "LHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <299>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LEFT_GUI ESCAPE  &kp Q  &kp W  &LHT EQUAL E  &kp R  &LHT GRAVE T        &kp Y                  &LHT UNDER U  &kp I      &kp O    &LHT PLUS P  &kp BACKSPACE
&mt LEFT_SHIFT TAB   &kp A  &kp S  &kp D         &kp F  &kp G               &kp H                  &kp J         &kp K      &kp L    &kp SEMI     &mt RSHIFT SQT
&mt LCTRL LEFT_GUI   &kp Z  &kp X  &kp C         &kp V  &LHT BACKSLASH B    &kp N                  &LHT MINUS M  &kp COMMA  &kp DOT  &kp SLASH    &LHT RIGHT_BRACKET LEFT_BRACKET
                                   &mo 1         &mo 1  &mt LEFT_ALT SPACE  &LHT LA(LSHIFT) ENTER  &mo 2         &mo 2
            >;
        };

        lower_layer {
            bindings = <
&kp LA(F4)      &kp C_VOL_DN    &kp UP_ARROW      &kp C_VOLUME_UP  &none  &none  &none  &none  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp DELETE
&kp LEFT_SHIFT  &kp LEFT_ARROW  &kp DOWN          &kp RIGHT        &none  &none  &none  &none  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N0
&kp LS(LG(S))   &kp K_PREVIOUS  &kp K_PLAY_PAUSE  &kp K_NEXT       &none  &none  &none  &none  &kp N7        &kp N8        &kp N9        &kp N0
                                                  &none            &none  &none  &none  &mo 3  &mo 3
            >;
        };

        layer_3 {
            bindings = <
&kp LA(F4)  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none  &none  &none  &none  &kp C_VOL_DN    &kp UP_ARROW      &kp C_VOL_UP     &kp DEL
&kp N0      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &none  &none  &none  &none  &kp LEFT_ARROW  &kp DOWN_ARROW    &kp RIGHT_ARROW  &kp RIGHT_SHIFT
&kp N0      &kp N7        &kp N8        &kp N9        &none  &none  &none  &none  &kp K_PREV      &kp K_PLAY_PAUSE  &kp K_NEXT       &kp LS(LG(S))
                                        &mo 3         &mo 3  &none  &none  &none  &none
            >;
        };

        raise_layer {
            bindings = <
&bt BT_CLR      &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none  &none  &none  &kp F1  &kp F2   &kp F3   &kp F4   &none
&bt BT_CLR_ALL  &bt BT_DISC 0  &bt BT_DISC 1  &bt BT_DISC 2  &none  &none  &none  &kp F5  &kp F6   &kp F7   &kp F8   &kp RIGHT_SHIFT
&none           &none          &none          &none          &none  &none  &none  &kp F9  &kp F10  &kp F11  &kp F12  &none
                                              &none          &none  &none  &none  &none   &none
            >;
        };
    };
};
