/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&mt {
    tapping-term-ms = <280>;
    flavor = "balanced";
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

&lt {
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

/ {
    macros {
        // Windows sleep key
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        next_input {
            bindings = <&kp LS(LALT)>;
            key-positions = <38 39>;
        };

        l_paste {
            bindings = <&kp LC(V)>;
            key-positions = <15 16>;
        };

        r_paste {
            bindings = <&kp LC(V)>;
            key-positions = <19 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty {
            bindings = <
&none             &kp Q           &kp W       &kp E        &kp R        &kp T        &kp Y        &kp U            &kp I        &kp O       &kp P               &none
&kp ESCAPE        &mt LEFT_GUI A  &mt LALT S  &mt LSHFT D  &mt LCTRL F  &kp G        &kp H        &mt RCTRL J      &mt RSHFT K  &mt RALT L  &mt LGUI SEMICOLON  &kp SQT
&kp LEFT_BRACKET  &kp Z           &kp X       &kp C        &kp V        &kp B        &kp N        &kp M            &kp COMMA    &kp DOT     &kp SLASH           &kp RIGHT_BRACKET
                                              &none        &lt 2 TAB    &lt 1 SPACE  &lt 1 ENTER  &lt 2 BACKSPACE  &none
            >;
        };

        control {
            bindings = <
&kp    &kp  &kp         &kp UP            &kp         &kp PG_DN               &kp PG_UP          &kp           &kp UP      &kp           &kp  &kp
&kp    &kp  &kp LEFT    &kp DOWN          &kp RIGHT   &kp LG(LS(LEFT_ARROW))  &kp LG(LS(RIGHT))  &kp LEFT      &kp DOWN    &kp RIGHT     &kp  &kp
&mo 3  &kp  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp END                 &kp HOME           &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp  &mo 3
                        &kp               &kp         &trans                  &trans             &kp           &kp
            >;
        };

        symbol {
            bindings = <
&none  &kp N1            &kp N2      &kp N3      &kp N4      &kp N5      &kp N6      &kp N7      &kp N8      &kp N9         &kp N0      &none
&none  &kp LS(NUMBER_1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)  &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)     &kp LS(N0)  &none
&none  &none             &kp PIPE    &kp TILDE   &kp UNDER   &kp PLUS    &kp EQUAL   &kp MINUS   &kp GRAVE   &kp BACKSLASH  &none       &none
                                     &none       &trans      &trans      &trans      &trans      &none
            >;
        };

        func {
            bindings = <
&trans  &mt F11 F1  &mt F12 F2    &kp F3        &kp F4        &kp F5  &kp F6  &kp F7      &kp F8      &kp F9        &kp F10     &none
&trans  &kp LGUI    &kp LALT      &kp LSHFT     &kp LCTRL     &trans  &trans  &kp RCTRL   &kp RSHFT   &kp RALT      &kp LGUI    &trans
&trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &trans  &bl BL_DEC  &bl BL_INC  &bl BL_CYCLE  &bl BL_TOG  &trans
                                  &trans        &trans        &trans  &trans  &none       &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
